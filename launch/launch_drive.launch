<launch>
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- Because the world path is relative to GAZEBO_RESOURCE_PATH, we append to it here. -->
    <arg name="world_name" value="$(find husqvarna)/worlds/test_world.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- urdf xml robot description loaded on the Parameter Server-->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find am_description)/urdf/automower.urdf.xacro'" />
  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="automower_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -model automower -x 0 -y 0 -z 0.2 -Y -1.5707" />

  <!-- load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find am_control)/config/joint_position_control.yaml" command="load" />
	<!-- source that publishes the joint positions as a sensor_msgs/JointState -->
	<param name="use_gui" value="false"/>
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<!-- publish all the frames to TF -->
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
		<param name="publish_frequency" value="50"/>
	</node>

  <!-- own script as publisher node -->
  <node name="driver" pkg="husqvarna" type="drive.py" required="true" />
</launch>
